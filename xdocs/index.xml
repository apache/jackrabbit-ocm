<?xml version="1.0"?>
<!-- 
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
	<properties>
		<author email="christophe.lombart@gmail.com">Christophe Lombart</author>
		<title>Graffito JCR Mapping</title>
	</properties>
	<body>
		<section name="Overview">
			<subsection name="Object/Content Mapping framework (ocm)">
				<p>This Graffito subproject is an object/JCR persistence and query service. This tools lets you to persist java objects into a JCR compliant repository - including association, inheritance, polymorphism, composition, and the Java collections framework. Furthermore, this jcr-mapping allows you to express queries in Java-based Criteria, as well as in JCR query language. It offers also features like version support and object locking.</p> 
				
				<p>In order to easily support the JCR specification, any content application managing an high level object model can use this framework. For example, a classic Forum application contains objects like "Forum", "Topic" and "Post". Now, the data objects (pojo) can be managed by our JCR mapping tools in order to persist them into a JCR compliant repository.</p> 
				
				
			</subsection>
			<subsection name ="Why an ocm ?">
				
				<p>A couple of month ago, we have decided to create a new object mapping framework for different reasons : </p>
				<ul>
					<li>Sometimes it is very convenient to be able to just access the JCR nodes and properties directly from your presentation-layer for very simple things (mostly generic display). When a lot of "business logic" are involved, the JCR API can be too low level and real business objects (pojo) are more appreciate in a such case.</li>				
					<li>The OCM framework provides more abstraction on the technologies used to persist your content. The different application layers are less dependent on the JCR API.</li>				
					<li>ORM tools like OJB or Hibernate are not appropriate for content oriented application.</li>
				</ul>	
				
			</subsection>
			<subsection name ="Prerequisite">
				<p>
					Before using this OCM framework, you should review the JCR specification and implementations like <a   href="http://incubator.apache.org/jackrabbit/">JackRabbit</a>. 
				</p>
				
			</subsection>
			<subsection name="Download">
				<p>There are no releases yet. See the menu "Getting Started" for instructions on how to download and build the Graffito JCR mapping sources.</p>	
			</subsection>
		</section>
	</body>
</document>
