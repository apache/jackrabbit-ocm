<?xml version="1.0"?>
<!-- 
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
	<properties>
		<author email="christophe.lombart@gmail.com">Christophe Lombart</author>
		<title>Introduction to the Mapping Strategies</title>
	</properties>
	<body>
		<section name="Introduction to the Mapping Strategies">
						
			<p>
				We are calling "Mapping strategy" the algorithm used by the Persistence Manager to map a bean into JCR nodes and/or properties.
				
			</p>
			
			<p>
				In order to explain the basic mapping strategies, we will use the following simple object model : 
				<ul>
					<li>A page contains a path (of course), a pageInfo  and a collection of paragraphs.</li>
					<li>The PageInfo class contains the title and the page description. We are using the pageInfo here to see all mapping features (see the bean-descriptors). In real application, this class is not necessary :-)</li>
					<li>Each paragraph contains a path and a text field.</li>
				</ul>	
				<p align="center"> <img src="./images/sample-model-doc.png" ></img></p>
			</p>	
			<p>
				This object model could be too simple for real applications and it is used here just to simplify the description of the different mapping strategies. 
			</p>	
			<p>Based on that object model, we can define the following java classes :</p>
			
			<source>
public class Page
{
	String path;
	PageInfo pageInfo;
	Collection paragraphs;
	
	/*  Add here the getter and setter methods */

	public void addParagraph(Paragraph paragraph)
	{
		if (paragraphs == null)
		{
			paragraphs = new ArrayList();
		}
				
		paragraphs.add(paragraph);
	}
}	

public class PageInfo
{
	String path;
	String title;
	String description;

	/*  Add here the getter and setter methods */

}

public class Paragraph
{
	private String path;
	private String text;
				
	/* Add here the getter and setter methods */
				
}
			</source>	
			
			
			<subsection name="The Class descriptor">
				<p>When you decide to map a bean class, you have to create a new class descriptor entry in the Persistence Manager descriptor file.</p>			
				<p>Here are the class-descriptors required to map the classes Page, PageInfo and Paragraph :</p>
			<source><![CDATA[ 				
<class-descriptor className="org.apache.portals.graffito.jcr.testmodel.Page" jcrType="graffito:page">
	<field-descriptor fieldName="path" path="true" />
	<bean-descriptor fieldName="pageInfo" jcrName="pageInfo" />
	<collection-descriptor fieldName="paragraphs" jcrName="paragraphs" elementClassName="org.apache.portals.graffito.jcr.testmodel.Paragraph" />
</class-descriptor>
									
<class-descriptor className="org.apache.portals.graffito.jcr.testmodel.PageInfo" jcrType="graffito:PageInfo">
	<field-descriptor fieldName="path" path="true" />
	<field-descriptor fieldName="title" jcrName="graffito:title"/>
	<field-descriptor fieldName="description" jcrName="graffito:description"/>
</class-descriptor>

<class-descriptor className="org.apache.portals.graffito.jcr.testmodel.Paragraph" jcrType="graffito:paragraph">
	<field-descriptor fieldName="path" path="true" />
	<field-descriptor fieldName="text" jcrName="graffito:text"/>
</class-descriptor>
			]]></source>
								
			<p>
				We will explain in more details each descriptors in the following sections (<a href="atomic-strategy.html">Mapping Atomic Fields</a>,<a href="bean-strategy.html">Mapping Bean Fields</a> and <a href="collection-strategy.html">Mapping Collection Fields</a>. If the page is stored on the path "/mysite/mypage1" and contains 2 paragraphs, here is the resulting jcr structure :
			</p>
			<p>
			<source><![CDATA[ 
/mysite/page1	
	/mysite/page1/pageInfo
		graffito:title = "This is my page title"
		graffito:description = "This is my page description"
	/mysite/page1/paragraphs
		/mysite/page1/paragraphs/paragraph1
			graffito:text = "This is the content of para1"
		/mysite/page1/paragraphs/paragraph2
			graffito:text = ""This is the content of para2"
			]]></source>		  
			</p>	
			<p>It is possible to have another kind of jcr structure by using other mapping strategies. You can see the section "Advance Mapping strategies" to get more information on that.</p>
			
			

				<p>Now, let's go back to the class-descriptor.</p>
				<source><![CDATA[ 
<class-descriptor className="org.apache.portals.graffito.jcr.testmodel.Paragraph" jcrType="nt:unstructured">
	<field-descriptor fieldName="path" path="true" />
	<field-descriptor fieldName="text" jcrName="graffito:text"/>
</class-descriptor>
				]]></source>

				<p>This class descriptor maps the class "org.apache.portals.graffito.jcr.testmodel.Paragraph" to the JCR type "nt:unstructured". Each field-descriptors maps one bean attribute to a JCR property. You can find more information on the field-descriptors in the page <a href="atomic-strategy.html">Mapping Atomic fields</a>. 
				</p>	
				<p>
					It is also possible to map a bean class to a specific JCR node type. The following class-descriptor map the class "org.apache.portals.graffito.jcr.testmodel.Paragraph" to the node type "graffito:paragraph".	
				</p>
				<source><![CDATA[ 				
<class-descriptor className="org.apache.portals.graffito.jcr.testmodel.Paragraph" jcrType="graffito:paragraph">
	<field-descriptor fieldName="path" path="true" />
	<field-descriptor fieldName="text" jcrName="graffito:text"/>
</class-descriptor>
				]]></source>	

				<p>
					In order to use correclty our example class with <a href="http://incubator.apache.org/jackrabbit/">Jackrabbit</a>, you should add the following node type definition in its custom_nodetypes.xml file or import the node type definition with the Jackrabbit API 
				</p>
				
				<source><![CDATA[ 				
<nodeType name="graffito:paragraph" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
	<supertypes>
		<supertype>mix:versionable</supertype>
		<supertype>nt:base</supertype>
	</supertypes>
	<propertyDefinition name="*" requiredType="undefined" autoCreated="false" 
			    mandatory="false" onParentVersion="COPY" protected="false" multiple="false" />
	<propertyDefinition name="graffito:text" requiredType="String" autoCreated="false" 
			    mandatory="true" onParentVersion="COPY" protected="false" multiple="false" />
</nodeType>
				]]></source>
				<p>
					Of course, node types "Graffito:Page" and "Graffito:PageInfo" are alse required. 				We are currently building a node type management tools which can import the node types from the class-descriptors.</p>
			</subsection>
			<subsection name ="The path Field">
				<p>
				Each mapped class contains a mandatory field called the "path field". It simply contains the JCR path  associated to the object.	
				For example, the following descriptor specify the bean field "myPath" as the path field.			
				</p>
				<source><![CDATA[ 
<field-descriptor fieldName="myPath" path="true" />
				  ]]></source>
				
			</subsection>
			
		</section>
	</body>
</document>
